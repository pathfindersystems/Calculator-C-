#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class Task {
public:
    Task(const std::string& description) : description(description), completed(false) {}

    std::string getDescription() const { return description; }
    bool isCompleted() const { return completed; }
    void markCompleted() { completed = true; }

private:
    std::string description;
    bool completed;
};

class TaskManager {
public:
    void addTask(const std::string& description) {
        tasks.push_back(Task(description));
        std::cout << "Task added successfully.\n";
    }

    void viewTasks() const {
        if (tasks.empty()) {
            std::cout << "No tasks in the list.\n";
            return;
        }

        std::cout << "Task List:\n";
        for (size_t i = 0; i < tasks.size(); ++i) {
            std::cout << i + 1 << ". " << (tasks[i].isCompleted() ? "[X] " : "[ ] ")
                      << tasks[i].getDescription() << "\n";
        }
    }

    void markTaskCompleted(size_t index) {
        if (index >= 1 && index <= tasks.size()) {
            tasks[index - 1].markCompleted();
            std::cout << "Task marked as completed.\n";
        } else {
            std::cout << "Invalid task number.\n";
        }
    }

    void removeTask(size_t index) {
        if (index >= 1 && index <= tasks.size()) {
            tasks.erase(tasks.begin() + index - 1);
            std::cout << "Task removed successfully.\n";
        } else {
            std::cout << "Invalid task number.\n";
        }
    }

private:
    std::vector<Task> tasks;
};

int main() {
    TaskManager manager;
    int choice;

    while (true) {
        std::cout << "\nTask Management System\n";
        std::cout << "1. Add Task\n";
        std::cout << "2. View Tasks\n";
        std::cout << "3. Mark Task as Completed\n";
        std::cout << "4. Remove Task\n";
        std::cout << "5. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1: {
                std::cin.ignore(); // Clear the newline from the buffer
                std::string description;
                std::cout << "Enter task description: ";
                std::getline(std::cin, description);
                manager.addTask(description);
                break;
            }
            case 2:
                manager.viewTasks();
                break;
            case 3: {
                size_t index;
                std::cout << "Enter task number to mark as completed: ";
                std::cin >> index;
                manager.markTaskCompleted(index);
                break;
            }
            case 4: {
                size_t index;
                std::cout << "Enter task number to remove: ";
                std::cin >> index;
                manager.removeTask(index);
                break;
            }
            case 5:
                std::cout << "Thank you for using the Task Management System. Goodbye!\n";
                return 0;
            default:
                std::cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
